{
	"info": {
		"_postman_id": "7d7ecc0b-4d81-4294-ab22-4863c72fe392",
		"name": "DEMOTESTING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "tables setting",
			"item": [
				{
					"name": "create DB tables",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "create table registration(\r\n\"idr\" SERIAL Primary Key NOT NULL,\r\n\"login\" text unique not null,\r\n\"email\" text unique not null,\r\n\"password\" text not null,\r\n\"isbilled\" boolean\r\n);\r\ncreate table billing(\r\n\"idb\" SERIAL Primary Key NOT NULL,\r\n\"card\" text,\r\n\"idr\" integer not null unique references registration\r\n);\r\ncreate table questionare(\r\n\"idq\" SERIAL Primary Key NOT NULL,\r\n\"answersraw\" text,\r\n\"idr\" integer not null unique references registration,\r\n\"answersresult\" text\r\n);"
						},
						"url": {
							"raw": "http://demotesting.space/{{updateUrlPath}}",
							"protocol": "http",
							"host": [
								"demotesting",
								"space"
							],
							"path": [
								"{{updateUrlPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "drop DB tables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96172327-ddf6-4ec0-a727-005460dfcb35",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9229ebc5-22bd-40a4-b535-c168b6f49aec",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "DROP TABLE billing;\r\nDROP TABLE questionare;\r\nDROP TABLE registration;\r\n"
						},
						"url": {
							"raw": "http://demotesting.space/{{updateUrlPath}}",
							"protocol": "http",
							"host": [
								"demotesting",
								"space"
							],
							"path": [
								"{{updateUrlPath}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "registration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4c9f2687-8a25-4539-b7fe-0ae47801f7a5",
						"exec": [
							"pm.request.url += pm.collectionVariables.get(\"updateUrlPath\")\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "921a53ce-5f46-47a6-842c-7308416d304f",
						"exec": [
							"if(pm.iterationData.get(\"iteration\")===1){\r",
							"    pm.test(\"response body equal 1\",function(){\r",
							"        pm.response.to.have.body(\"1\");\r",
							"    });\r",
							"};\r",
							"if(pm.iterationData.get(\"iteration\")===2||pm.iterationData.get(\"iteration\")===3){\r",
							"    pm.test(\"response body uncludes 'dublicate key'\",function(){\r",
							"        let bodyText = pm.response.text();\r",
							"        let check = bodyText.indexOf(\"dublicate key\")\r",
							"        pm.expect(check==-1).to.be.true;\r",
							"    });\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "insert into registration (\"login\",\"password\",\"email\") values ('{{regLogin}}','{{regPswd}}','{{regEmail}}');",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "http://demotesting.space/",
					"protocol": "http",
					"host": [
						"demotesting",
						"space"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "billing",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "854c84cb-6a97-4ff3-980f-a9724cc4a64d",
						"exec": [
							"if(pm.iterationData.get(\"iteration\")===1){\r",
							"    pm.test(\"response body equal 1\",function(){\r",
							"        pm.response.to.have.body(\"1\");\r",
							"    });\r",
							"};\r",
							"if(pm.iterationData.get(\"iteration\")===2){\r",
							"    pm.test(\"response body uncludes 'dublicate key'\",function(){\r",
							"        let bodyText = pm.response.text();\r",
							"        let check = bodyText.indexOf(\"dublicate key\")\r",
							"        pm.expect(check==-1).to.be.true;\r",
							"    });\r",
							"};\r",
							"if(pm.iterationData.get(\"iteration\")===3){\r",
							"    pm.test(\"response body equal 0\",function(){\r",
							"        pm.response.to.have.body(\"0\");\r",
							"    });\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0bcc41a5-a93a-435e-afaa-b7a71e0605d0",
						"exec": [
							"pm.request.url += pm.collectionVariables.get(\"updateUrlPath\")\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "insert into billing (\"idr\") select \"idr\" from registration where \"login\" = '{{login}}' AND \"password\" = '{{pswd}}'; update billing set \"card\" = '{{card}}' where \"idr\" =  (select \"idr\" from registration where \"login\" = '{{}}' AND \"password\" = '{{pswd}}'); update registration set \"isbilled\" = 'true' where \"login\" = '{{login}}' AND \"password\" = '{{pswd}}'"
				},
				"url": {
					"raw": "http://demotesting.space/",
					"protocol": "http",
					"host": [
						"demotesting",
						"space"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "questionare",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81611eca-e08b-4199-b993-cdeada07b64c",
						"exec": [
							"if(pm.iterationData.get(\"iteration\")===1){\r",
							"    pm.test(\"response body equal 1\",function(){\r",
							"        console.log(pm.request.body);\r",
							"        pm.response.to.have.body(\"1\");\r",
							"    });\r",
							"};\r",
							"if(pm.iterationData.get(\"iteration\")===2){\r",
							"    pm.test(\"response body uncludes 'dublicate key'\",function(){\r",
							"        let bodyText = pm.response.text();\r",
							"        let check = bodyText.indexOf(\"dublicate key\")\r",
							"        pm.expect(check==-1).to.be.true;\r",
							"    });\r",
							"};\r",
							"if(pm.iterationData.get(\"iteration\")===3){\r",
							"    pm.test(\"response body equal 0\",function(){\r",
							"        pm.response.to.have.body(\"0\");\r",
							"    });\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "50edf148-60f2-4ee1-a53c-55ea5f723f81",
						"exec": [
							"pm.request.url += pm.collectionVariables.get(\"updateUrlPath\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "insert into questionare (\"idr\") select \"idr\" from registration where \"login\" = '{{login}}' AND \"password\" = '{{pswd}}' AND \"isbilled\" = true; update questionare set \"answersraw\" = '{{answersRaw}}', \"answersresult\" = '{{answersResult}}' where \"idr\" =  (select \"idr\" from registration where \"login\" = '{{login}}' AND \"password\" = '{{pswd}}' AND \"isbilled\" = true);"
				},
				"url": {
					"raw": "http://demotesting.space/",
					"protocol": "http",
					"host": [
						"demotesting",
						"space"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "repeatResult",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9d33affa-3782-4778-8edb-af7dc4e02264",
						"exec": [
							"if(pm.iterationData.get(\"iteration\")===1){\r",
							"    pm.test(\"response body include\",function(){\r",
							"        let bodyText = pm.response.text();\r",
							"        let check = bodyText.indexOf(\"answersResult\")\r",
							"        pm.expect(check==-1).to.be.true;\r",
							"    });\r",
							"};\r",
							"if(pm.iterationData.get(\"iteration\")===3){\r",
							"    pm.test(\"response body equal false\",function(){\r",
							"        pm.response.to.have.body(\"false\");\r",
							"    });\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a535f02f-cf5d-4614-9fe2-be9fa2ba059a",
						"exec": [
							"pm.request.url += pm.collectionVariables.get(\"selectUrlPath\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "select \"login\",\"password\",\"email\",\"card\",\"isbilled\",\"answersraw\",\"answersresult\" from registration a, billing b, questionare c where a.\"idr\"=b.\"idr\"AND  a.\"idr\"=c.\"idr\" AND \"login\"='{{login}}' AND \"password\"='{{pswd}}';"
				},
				"url": {
					"raw": "http://demotesting.space/",
					"protocol": "http",
					"host": [
						"demotesting",
						"space"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ac3eff3e-972b-449e-95ee-1f2a6a028db0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b17801b7-cfae-419e-adb2-1e412a2c6faf",
				"type": "text/javascript",
				"exec": [
					"pm.collectionVariables.set(\"count\",0);"
				]
			}
		}
	],
	"variable": [
		{
			"id": "f25023bc-33eb-4a92-b527-13744d75c29c",
			"key": "updateUrlPath",
			"value": "postman/update-test.php\n"
		},
		{
			"id": "bf470370-72c2-4efb-bc71-300aafa3a875",
			"key": "selectUrlPath",
			"value": "postman/select-test.php"
		},
		{
			"id": "27bbf533-58c2-4412-b4dc-3398f397df1d",
			"key": "count",
			"value": "0"
		}
	],
	"protocolProfileBehavior": {}
}